/* tslint:disable */
/* eslint-disable */
/**
 * API Sekolah Muhammadiyah
 * The cats API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateKelaDto
 */
export interface CreateKelaDto {
    /**
     * 
     * @type {string}
     * @memberof CreateKelaDto
     */
    'nama_kelas': string;
}
/**
 * 
 * @export
 * @interface CreateNilaiDto
 */
export interface CreateNilaiDto {
    /**
     * ID Pengumpulan yang terkait dengan nilai
     * @type {number}
     * @memberof CreateNilaiDto
     */
    'pengumpulanId': number;
    /**
     * Nilai yang diberikan
     * @type {number}
     * @memberof CreateNilaiDto
     */
    'nilai': number;
}
/**
 * 
 * @export
 * @interface CreatePelajaranDto
 */
export interface CreatePelajaranDto {
    /**
     * 
     * @type {number}
     * @memberof CreatePelajaranDto
     */
    'kelasId': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePelajaranDto
     */
    'creatorId': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePelajaranDto
     */
    'nama_pelajaran': string;
}
/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'nama_lengkap': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'confPassword': string;
    /**
     * 
     * @type {number}
     * @memberof CreateUserDto
     */
    'roleId': number;
}
/**
 * 
 * @export
 * @interface CreateUserOnKelaDto
 */
export interface CreateUserOnKelaDto {
    /**
     * 
     * @type {number}
     * @memberof CreateUserOnKelaDto
     */
    'userId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateUserOnKelaDto
     */
    'kelasId': number;
}
/**
 * 
 * @export
 * @interface CreateUserOnMateriDto
 */
export interface CreateUserOnMateriDto {
    /**
     * ID pengguna yang terkait dengan materi
     * @type {number}
     * @memberof CreateUserOnMateriDto
     */
    'userId': number;
    /**
     * ID materi yang terkait dengan pengguna
     * @type {number}
     * @memberof CreateUserOnMateriDto
     */
    'materiId': number;
}
/**
 * 
 * @export
 * @interface DeleteUserOnKelasDto
 */
export interface DeleteUserOnKelasDto {
    /**
     * 
     * @type {number}
     * @memberof DeleteUserOnKelasDto
     */
    'oldUserId': number;
    /**
     * 
     * @type {number}
     * @memberof DeleteUserOnKelasDto
     */
    'oldKelasId': number;
}
/**
 * 
 * @export
 * @interface UpdateKelaDto
 */
export interface UpdateKelaDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateKelaDto
     */
    'nama_kelas': string;
}
/**
 * 
 * @export
 * @interface UpdateNilaiDto
 */
export interface UpdateNilaiDto {
    /**
     * ID Pengumpulan yang terkait dengan nilai
     * @type {number}
     * @memberof UpdateNilaiDto
     */
    'pengumpulanId': number;
    /**
     * Nilai yang diberikan
     * @type {number}
     * @memberof UpdateNilaiDto
     */
    'nilai': number;
}
/**
 * 
 * @export
 * @interface UpdatePelajaranDto
 */
export interface UpdatePelajaranDto {
    /**
     * 
     * @type {number}
     * @memberof UpdatePelajaranDto
     */
    'kelasId': number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePelajaranDto
     */
    'creatorId': number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePelajaranDto
     */
    'nama_pelajaran': string;
}
/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'nama_lengkap': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'confPassword': string;
}
/**
 * 
 * @export
 * @interface UpdateUserOnKelasDto
 */
export interface UpdateUserOnKelasDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateUserOnKelasDto
     */
    'oldUserId': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserOnKelasDto
     */
    'oldKelasId': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserOnKelasDto
     */
    'newUserId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserOnKelasDto
     */
    'newKelasId'?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Tugas
         * @param {number} materiId ID materi yang terkait dengan tugas
         * @param {number} creatorId ID pengguna yang membuat tugas
         * @param {string} namaTugas Nama tugas
         * @param {string} deadline Tanggal batas waktu tugas
         * @param {string} [file] file tugas
         * @param {string} [fileUrl] File URL tugas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tugasControllerCreate: async (materiId: number, creatorId: number, namaTugas: string, deadline: string, file?: string, fileUrl?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'materiId' is not null or undefined
            assertParamExists('tugasControllerCreate', 'materiId', materiId)
            // verify required parameter 'creatorId' is not null or undefined
            assertParamExists('tugasControllerCreate', 'creatorId', creatorId)
            // verify required parameter 'namaTugas' is not null or undefined
            assertParamExists('tugasControllerCreate', 'namaTugas', namaTugas)
            // verify required parameter 'deadline' is not null or undefined
            assertParamExists('tugasControllerCreate', 'deadline', deadline)
            const localVarPath = `/tugas/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (materiId !== undefined) { 
                localVarFormParams.append('materiId', materiId as any);
            }
    
            if (creatorId !== undefined) { 
                localVarFormParams.append('creatorId', creatorId as any);
            }
    
            if (namaTugas !== undefined) { 
                localVarFormParams.append('nama_tugas', namaTugas as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
            if (deadline !== undefined) { 
                localVarFormParams.append('deadline', deadline as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Tugas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tugasControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tugas/get-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get One Tugas
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tugasControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tugasControllerFindOne', 'id', id)
            const localVarPath = `/tugas/get-by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Tugas
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tugasControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tugasControllerRemove', 'id', id)
            const localVarPath = `/tugas/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Tugas
         * @param {number} id 
         * @param {number} materiId ID materi yang terkait dengan tugas
         * @param {number} creatorId ID pengguna yang membuat tugas
         * @param {string} namaTugas Nama tugas
         * @param {string} deadline Tanggal batas waktu tugas
         * @param {string} [file] file tugas
         * @param {string} [fileUrl] File URL tugas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tugasControllerUpdate: async (id: number, materiId: number, creatorId: number, namaTugas: string, deadline: string, file?: string, fileUrl?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tugasControllerUpdate', 'id', id)
            // verify required parameter 'materiId' is not null or undefined
            assertParamExists('tugasControllerUpdate', 'materiId', materiId)
            // verify required parameter 'creatorId' is not null or undefined
            assertParamExists('tugasControllerUpdate', 'creatorId', creatorId)
            // verify required parameter 'namaTugas' is not null or undefined
            assertParamExists('tugasControllerUpdate', 'namaTugas', namaTugas)
            // verify required parameter 'deadline' is not null or undefined
            assertParamExists('tugasControllerUpdate', 'deadline', deadline)
            const localVarPath = `/tugas/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (materiId !== undefined) { 
                localVarFormParams.append('materiId', materiId as any);
            }
    
            if (creatorId !== undefined) { 
                localVarFormParams.append('creatorId', creatorId as any);
            }
    
            if (namaTugas !== undefined) { 
                localVarFormParams.append('nama_tugas', namaTugas as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
            if (deadline !== undefined) { 
                localVarFormParams.append('deadline', deadline as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create UserOnMateri
         * @param {CreateUserOnMateriDto} createUserOnMateriDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnMateriControllerCreate: async (createUserOnMateriDto: CreateUserOnMateriDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserOnMateriDto' is not null or undefined
            assertParamExists('userOnMateriControllerCreate', 'createUserOnMateriDto', createUserOnMateriDto)
            const localVarPath = `/user-on-materi/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserOnMateriDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All UserOnMateri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnMateriControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-on-materi/get-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get One By Materi Id UserOnMateri
         * @param {number} materiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnMateriControllerFindOneByMateriId: async (materiId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'materiId' is not null or undefined
            assertParamExists('userOnMateriControllerFindOneByMateriId', 'materiId', materiId)
            const localVarPath = `/user-on-materi/get-by-materi-id/{materiId}`
                .replace(`{${"materiId"}}`, encodeURIComponent(String(materiId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get One By User Id UserOnMateri
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnMateriControllerFindOneByUserId: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userOnMateriControllerFindOneByUserId', 'userId', userId)
            const localVarPath = `/user-on-materi/get-by-user-id/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete UserOnMateri
         * @param {number} userId 
         * @param {number} materiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnMateriControllerRemove: async (userId: number, materiId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userOnMateriControllerRemove', 'userId', userId)
            // verify required parameter 'materiId' is not null or undefined
            assertParamExists('userOnMateriControllerRemove', 'materiId', materiId)
            const localVarPath = `/user-on-materi/delete/{userId}/{materiId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"materiId"}}`, encodeURIComponent(String(materiId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Tugas
         * @param {number} materiId ID materi yang terkait dengan tugas
         * @param {number} creatorId ID pengguna yang membuat tugas
         * @param {string} namaTugas Nama tugas
         * @param {string} deadline Tanggal batas waktu tugas
         * @param {string} [file] file tugas
         * @param {string} [fileUrl] File URL tugas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tugasControllerCreate(materiId: number, creatorId: number, namaTugas: string, deadline: string, file?: string, fileUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tugasControllerCreate(materiId, creatorId, namaTugas, deadline, file, fileUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tugasControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Tugas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tugasControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tugasControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tugasControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get One Tugas
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tugasControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tugasControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tugasControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Tugas
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tugasControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tugasControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tugasControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Tugas
         * @param {number} id 
         * @param {number} materiId ID materi yang terkait dengan tugas
         * @param {number} creatorId ID pengguna yang membuat tugas
         * @param {string} namaTugas Nama tugas
         * @param {string} deadline Tanggal batas waktu tugas
         * @param {string} [file] file tugas
         * @param {string} [fileUrl] File URL tugas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tugasControllerUpdate(id: number, materiId: number, creatorId: number, namaTugas: string, deadline: string, file?: string, fileUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tugasControllerUpdate(id, materiId, creatorId, namaTugas, deadline, file, fileUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tugasControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create UserOnMateri
         * @param {CreateUserOnMateriDto} createUserOnMateriDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOnMateriControllerCreate(createUserOnMateriDto: CreateUserOnMateriDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userOnMateriControllerCreate(createUserOnMateriDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.userOnMateriControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All UserOnMateri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOnMateriControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userOnMateriControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.userOnMateriControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get One By Materi Id UserOnMateri
         * @param {number} materiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOnMateriControllerFindOneByMateriId(materiId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userOnMateriControllerFindOneByMateriId(materiId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.userOnMateriControllerFindOneByMateriId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get One By User Id UserOnMateri
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOnMateriControllerFindOneByUserId(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userOnMateriControllerFindOneByUserId(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.userOnMateriControllerFindOneByUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete UserOnMateri
         * @param {number} userId 
         * @param {number} materiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOnMateriControllerRemove(userId: number, materiId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userOnMateriControllerRemove(userId, materiId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.userOnMateriControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Tugas
         * @param {number} materiId ID materi yang terkait dengan tugas
         * @param {number} creatorId ID pengguna yang membuat tugas
         * @param {string} namaTugas Nama tugas
         * @param {string} deadline Tanggal batas waktu tugas
         * @param {string} [file] file tugas
         * @param {string} [fileUrl] File URL tugas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tugasControllerCreate(materiId: number, creatorId: number, namaTugas: string, deadline: string, file?: string, fileUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.tugasControllerCreate(materiId, creatorId, namaTugas, deadline, file, fileUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Tugas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tugasControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.tugasControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get One Tugas
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tugasControllerFindOne(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.tugasControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Tugas
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tugasControllerRemove(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.tugasControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Tugas
         * @param {number} id 
         * @param {number} materiId ID materi yang terkait dengan tugas
         * @param {number} creatorId ID pengguna yang membuat tugas
         * @param {string} namaTugas Nama tugas
         * @param {string} deadline Tanggal batas waktu tugas
         * @param {string} [file] file tugas
         * @param {string} [fileUrl] File URL tugas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tugasControllerUpdate(id: number, materiId: number, creatorId: number, namaTugas: string, deadline: string, file?: string, fileUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.tugasControllerUpdate(id, materiId, creatorId, namaTugas, deadline, file, fileUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create UserOnMateri
         * @param {CreateUserOnMateriDto} createUserOnMateriDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnMateriControllerCreate(createUserOnMateriDto: CreateUserOnMateriDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userOnMateriControllerCreate(createUserOnMateriDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All UserOnMateri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnMateriControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userOnMateriControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get One By Materi Id UserOnMateri
         * @param {number} materiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnMateriControllerFindOneByMateriId(materiId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userOnMateriControllerFindOneByMateriId(materiId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get One By User Id UserOnMateri
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnMateriControllerFindOneByUserId(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userOnMateriControllerFindOneByUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete UserOnMateri
         * @param {number} userId 
         * @param {number} materiId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnMateriControllerRemove(userId: number, materiId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userOnMateriControllerRemove(userId, materiId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create Tugas
     * @param {number} materiId ID materi yang terkait dengan tugas
     * @param {number} creatorId ID pengguna yang membuat tugas
     * @param {string} namaTugas Nama tugas
     * @param {string} deadline Tanggal batas waktu tugas
     * @param {string} [file] file tugas
     * @param {string} [fileUrl] File URL tugas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tugasControllerCreate(materiId: number, creatorId: number, namaTugas: string, deadline: string, file?: string, fileUrl?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tugasControllerCreate(materiId, creatorId, namaTugas, deadline, file, fileUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Tugas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tugasControllerFindAll(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tugasControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get One Tugas
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tugasControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tugasControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Tugas
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tugasControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tugasControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Tugas
     * @param {number} id 
     * @param {number} materiId ID materi yang terkait dengan tugas
     * @param {number} creatorId ID pengguna yang membuat tugas
     * @param {string} namaTugas Nama tugas
     * @param {string} deadline Tanggal batas waktu tugas
     * @param {string} [file] file tugas
     * @param {string} [fileUrl] File URL tugas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tugasControllerUpdate(id: number, materiId: number, creatorId: number, namaTugas: string, deadline: string, file?: string, fileUrl?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tugasControllerUpdate(id, materiId, creatorId, namaTugas, deadline, file, fileUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create UserOnMateri
     * @param {CreateUserOnMateriDto} createUserOnMateriDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userOnMateriControllerCreate(createUserOnMateriDto: CreateUserOnMateriDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userOnMateriControllerCreate(createUserOnMateriDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All UserOnMateri
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userOnMateriControllerFindAll(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userOnMateriControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get One By Materi Id UserOnMateri
     * @param {number} materiId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userOnMateriControllerFindOneByMateriId(materiId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userOnMateriControllerFindOneByMateriId(materiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get One By User Id UserOnMateri
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userOnMateriControllerFindOneByUserId(userId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userOnMateriControllerFindOneByUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete UserOnMateri
     * @param {number} userId 
     * @param {number} materiId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userOnMateriControllerRemove(userId: number, materiId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userOnMateriControllerRemove(userId, materiId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * KelasApi - axios parameter creator
 * @export
 */
export const KelasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Kelas
         * @param {CreateKelaDto} createKelaDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kelasControllerCreate: async (createKelaDto: CreateKelaDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createKelaDto' is not null or undefined
            assertParamExists('kelasControllerCreate', 'createKelaDto', createKelaDto)
            const localVarPath = `/kelas/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createKelaDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Kelas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kelasControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/kelas/get-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Kelas By Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kelasControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('kelasControllerFindOne', 'id', id)
            const localVarPath = `/kelas/get-by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Kelas
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kelasControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('kelasControllerRemove', 'id', id)
            const localVarPath = `/kelas/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Kelas
         * @param {number} id 
         * @param {UpdateKelaDto} updateKelaDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kelasControllerUpdate: async (id: number, updateKelaDto: UpdateKelaDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('kelasControllerUpdate', 'id', id)
            // verify required parameter 'updateKelaDto' is not null or undefined
            assertParamExists('kelasControllerUpdate', 'updateKelaDto', updateKelaDto)
            const localVarPath = `/kelas/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateKelaDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KelasApi - functional programming interface
 * @export
 */
export const KelasApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KelasApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Kelas
         * @param {CreateKelaDto} createKelaDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kelasControllerCreate(createKelaDto: CreateKelaDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kelasControllerCreate(createKelaDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KelasApi.kelasControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Kelas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kelasControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kelasControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KelasApi.kelasControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Kelas By Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kelasControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kelasControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KelasApi.kelasControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Kelas
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kelasControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kelasControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KelasApi.kelasControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Kelas
         * @param {number} id 
         * @param {UpdateKelaDto} updateKelaDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kelasControllerUpdate(id: number, updateKelaDto: UpdateKelaDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kelasControllerUpdate(id, updateKelaDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['KelasApi.kelasControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * KelasApi - factory interface
 * @export
 */
export const KelasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KelasApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Kelas
         * @param {CreateKelaDto} createKelaDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kelasControllerCreate(createKelaDto: CreateKelaDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.kelasControllerCreate(createKelaDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Kelas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kelasControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.kelasControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Kelas By Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kelasControllerFindOne(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.kelasControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Kelas
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kelasControllerRemove(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.kelasControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Kelas
         * @param {number} id 
         * @param {UpdateKelaDto} updateKelaDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kelasControllerUpdate(id: number, updateKelaDto: UpdateKelaDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.kelasControllerUpdate(id, updateKelaDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KelasApi - object-oriented interface
 * @export
 * @class KelasApi
 * @extends {BaseAPI}
 */
export class KelasApi extends BaseAPI {
    /**
     * 
     * @summary Create Kelas
     * @param {CreateKelaDto} createKelaDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KelasApi
     */
    public kelasControllerCreate(createKelaDto: CreateKelaDto, options?: RawAxiosRequestConfig) {
        return KelasApiFp(this.configuration).kelasControllerCreate(createKelaDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Kelas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KelasApi
     */
    public kelasControllerFindAll(options?: RawAxiosRequestConfig) {
        return KelasApiFp(this.configuration).kelasControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Kelas By Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KelasApi
     */
    public kelasControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return KelasApiFp(this.configuration).kelasControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Kelas
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KelasApi
     */
    public kelasControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return KelasApiFp(this.configuration).kelasControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Kelas
     * @param {number} id 
     * @param {UpdateKelaDto} updateKelaDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KelasApi
     */
    public kelasControllerUpdate(id: number, updateKelaDto: UpdateKelaDto, options?: RawAxiosRequestConfig) {
        return KelasApiFp(this.configuration).kelasControllerUpdate(id, updateKelaDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MateriApi - axios parameter creator
 * @export
 */
export const MateriApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Materi
         * @param {number} pelajaranId ID pelajaran yang terkait dengan materi
         * @param {number} creatorId ID pengguna yang membuat materi
         * @param {string} namaMateri Nama materi
         * @param {string} [file] File materi
         * @param {string} [fileUrl] File URL materi
         * @param {string} [ytLink] Link video YouTube terkait materi
         * @param {string} [fileLink] Link file tambahan terkait materi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materiControllerCreate: async (pelajaranId: number, creatorId: number, namaMateri: string, file?: string, fileUrl?: string, ytLink?: string, fileLink?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pelajaranId' is not null or undefined
            assertParamExists('materiControllerCreate', 'pelajaranId', pelajaranId)
            // verify required parameter 'creatorId' is not null or undefined
            assertParamExists('materiControllerCreate', 'creatorId', creatorId)
            // verify required parameter 'namaMateri' is not null or undefined
            assertParamExists('materiControllerCreate', 'namaMateri', namaMateri)
            const localVarPath = `/materi/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (pelajaranId !== undefined) { 
                localVarFormParams.append('pelajaranId', pelajaranId as any);
            }
    
            if (creatorId !== undefined) { 
                localVarFormParams.append('creatorId', creatorId as any);
            }
    
            if (namaMateri !== undefined) { 
                localVarFormParams.append('nama_materi', namaMateri as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
            if (ytLink !== undefined) { 
                localVarFormParams.append('yt_link', ytLink as any);
            }
    
            if (fileLink !== undefined) { 
                localVarFormParams.append('file_link', fileLink as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Materi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materiControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/materi/get-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Materi By ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materiControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('materiControllerFindOne', 'id', id)
            const localVarPath = `/materi/get-by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Materi
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materiControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('materiControllerRemove', 'id', id)
            const localVarPath = `/materi/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Materi
         * @param {number} id 
         * @param {number} [pelajaranId] ID pelajaran yang terkait dengan materi
         * @param {number} [creatorId] ID pengguna yang membuat materi
         * @param {string} [namaMateri] Nama materi
         * @param {string} [file] File materi
         * @param {string} [fileUrl] File URL materi
         * @param {string} [ytLink] Link video YouTube terkait materi
         * @param {string} [fileLink] Link file tambahan terkait materi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materiControllerUpdate: async (id: number, pelajaranId?: number, creatorId?: number, namaMateri?: string, file?: string, fileUrl?: string, ytLink?: string, fileLink?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('materiControllerUpdate', 'id', id)
            const localVarPath = `/materi/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (pelajaranId !== undefined) { 
                localVarFormParams.append('pelajaranId', pelajaranId as any);
            }
    
            if (creatorId !== undefined) { 
                localVarFormParams.append('creatorId', creatorId as any);
            }
    
            if (namaMateri !== undefined) { 
                localVarFormParams.append('nama_materi', namaMateri as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
            if (ytLink !== undefined) { 
                localVarFormParams.append('yt_link', ytLink as any);
            }
    
            if (fileLink !== undefined) { 
                localVarFormParams.append('file_link', fileLink as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MateriApi - functional programming interface
 * @export
 */
export const MateriApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MateriApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Materi
         * @param {number} pelajaranId ID pelajaran yang terkait dengan materi
         * @param {number} creatorId ID pengguna yang membuat materi
         * @param {string} namaMateri Nama materi
         * @param {string} [file] File materi
         * @param {string} [fileUrl] File URL materi
         * @param {string} [ytLink] Link video YouTube terkait materi
         * @param {string} [fileLink] Link file tambahan terkait materi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materiControllerCreate(pelajaranId: number, creatorId: number, namaMateri: string, file?: string, fileUrl?: string, ytLink?: string, fileLink?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materiControllerCreate(pelajaranId, creatorId, namaMateri, file, fileUrl, ytLink, fileLink, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MateriApi.materiControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Materi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materiControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materiControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MateriApi.materiControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Materi By ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materiControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materiControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MateriApi.materiControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Materi
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materiControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materiControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MateriApi.materiControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Materi
         * @param {number} id 
         * @param {number} [pelajaranId] ID pelajaran yang terkait dengan materi
         * @param {number} [creatorId] ID pengguna yang membuat materi
         * @param {string} [namaMateri] Nama materi
         * @param {string} [file] File materi
         * @param {string} [fileUrl] File URL materi
         * @param {string} [ytLink] Link video YouTube terkait materi
         * @param {string} [fileLink] Link file tambahan terkait materi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materiControllerUpdate(id: number, pelajaranId?: number, creatorId?: number, namaMateri?: string, file?: string, fileUrl?: string, ytLink?: string, fileLink?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materiControllerUpdate(id, pelajaranId, creatorId, namaMateri, file, fileUrl, ytLink, fileLink, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MateriApi.materiControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MateriApi - factory interface
 * @export
 */
export const MateriApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MateriApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Materi
         * @param {number} pelajaranId ID pelajaran yang terkait dengan materi
         * @param {number} creatorId ID pengguna yang membuat materi
         * @param {string} namaMateri Nama materi
         * @param {string} [file] File materi
         * @param {string} [fileUrl] File URL materi
         * @param {string} [ytLink] Link video YouTube terkait materi
         * @param {string} [fileLink] Link file tambahan terkait materi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materiControllerCreate(pelajaranId: number, creatorId: number, namaMateri: string, file?: string, fileUrl?: string, ytLink?: string, fileLink?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.materiControllerCreate(pelajaranId, creatorId, namaMateri, file, fileUrl, ytLink, fileLink, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Materi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materiControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.materiControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Materi By ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materiControllerFindOne(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.materiControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Materi
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materiControllerRemove(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.materiControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Materi
         * @param {number} id 
         * @param {number} [pelajaranId] ID pelajaran yang terkait dengan materi
         * @param {number} [creatorId] ID pengguna yang membuat materi
         * @param {string} [namaMateri] Nama materi
         * @param {string} [file] File materi
         * @param {string} [fileUrl] File URL materi
         * @param {string} [ytLink] Link video YouTube terkait materi
         * @param {string} [fileLink] Link file tambahan terkait materi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materiControllerUpdate(id: number, pelajaranId?: number, creatorId?: number, namaMateri?: string, file?: string, fileUrl?: string, ytLink?: string, fileLink?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.materiControllerUpdate(id, pelajaranId, creatorId, namaMateri, file, fileUrl, ytLink, fileLink, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MateriApi - object-oriented interface
 * @export
 * @class MateriApi
 * @extends {BaseAPI}
 */
export class MateriApi extends BaseAPI {
    /**
     * 
     * @summary Create Materi
     * @param {number} pelajaranId ID pelajaran yang terkait dengan materi
     * @param {number} creatorId ID pengguna yang membuat materi
     * @param {string} namaMateri Nama materi
     * @param {string} [file] File materi
     * @param {string} [fileUrl] File URL materi
     * @param {string} [ytLink] Link video YouTube terkait materi
     * @param {string} [fileLink] Link file tambahan terkait materi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MateriApi
     */
    public materiControllerCreate(pelajaranId: number, creatorId: number, namaMateri: string, file?: string, fileUrl?: string, ytLink?: string, fileLink?: string, options?: RawAxiosRequestConfig) {
        return MateriApiFp(this.configuration).materiControllerCreate(pelajaranId, creatorId, namaMateri, file, fileUrl, ytLink, fileLink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Materi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MateriApi
     */
    public materiControllerFindAll(options?: RawAxiosRequestConfig) {
        return MateriApiFp(this.configuration).materiControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Materi By ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MateriApi
     */
    public materiControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return MateriApiFp(this.configuration).materiControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Materi
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MateriApi
     */
    public materiControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return MateriApiFp(this.configuration).materiControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Materi
     * @param {number} id 
     * @param {number} [pelajaranId] ID pelajaran yang terkait dengan materi
     * @param {number} [creatorId] ID pengguna yang membuat materi
     * @param {string} [namaMateri] Nama materi
     * @param {string} [file] File materi
     * @param {string} [fileUrl] File URL materi
     * @param {string} [ytLink] Link video YouTube terkait materi
     * @param {string} [fileLink] Link file tambahan terkait materi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MateriApi
     */
    public materiControllerUpdate(id: number, pelajaranId?: number, creatorId?: number, namaMateri?: string, file?: string, fileUrl?: string, ytLink?: string, fileLink?: string, options?: RawAxiosRequestConfig) {
        return MateriApiFp(this.configuration).materiControllerUpdate(id, pelajaranId, creatorId, namaMateri, file, fileUrl, ytLink, fileLink, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NilaiApi - axios parameter creator
 * @export
 */
export const NilaiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Nilai
         * @param {CreateNilaiDto} createNilaiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nilaiControllerCreate: async (createNilaiDto: CreateNilaiDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createNilaiDto' is not null or undefined
            assertParamExists('nilaiControllerCreate', 'createNilaiDto', createNilaiDto)
            const localVarPath = `/nilai/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createNilaiDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Nilai
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nilaiControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/nilai/get-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get One Nilai
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nilaiControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('nilaiControllerFindOne', 'id', id)
            const localVarPath = `/nilai/get-by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Nilai
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nilaiControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('nilaiControllerRemove', 'id', id)
            const localVarPath = `/nilai/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Nilai
         * @param {number} id 
         * @param {UpdateNilaiDto} updateNilaiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nilaiControllerUpdate: async (id: number, updateNilaiDto: UpdateNilaiDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('nilaiControllerUpdate', 'id', id)
            // verify required parameter 'updateNilaiDto' is not null or undefined
            assertParamExists('nilaiControllerUpdate', 'updateNilaiDto', updateNilaiDto)
            const localVarPath = `/nilai/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateNilaiDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NilaiApi - functional programming interface
 * @export
 */
export const NilaiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NilaiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Nilai
         * @param {CreateNilaiDto} createNilaiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nilaiControllerCreate(createNilaiDto: CreateNilaiDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nilaiControllerCreate(createNilaiDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NilaiApi.nilaiControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Nilai
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nilaiControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nilaiControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NilaiApi.nilaiControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get One Nilai
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nilaiControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nilaiControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NilaiApi.nilaiControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Nilai
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nilaiControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nilaiControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NilaiApi.nilaiControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Nilai
         * @param {number} id 
         * @param {UpdateNilaiDto} updateNilaiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nilaiControllerUpdate(id: number, updateNilaiDto: UpdateNilaiDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nilaiControllerUpdate(id, updateNilaiDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NilaiApi.nilaiControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NilaiApi - factory interface
 * @export
 */
export const NilaiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NilaiApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Nilai
         * @param {CreateNilaiDto} createNilaiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nilaiControllerCreate(createNilaiDto: CreateNilaiDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.nilaiControllerCreate(createNilaiDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Nilai
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nilaiControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.nilaiControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get One Nilai
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nilaiControllerFindOne(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.nilaiControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Nilai
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nilaiControllerRemove(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.nilaiControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Nilai
         * @param {number} id 
         * @param {UpdateNilaiDto} updateNilaiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nilaiControllerUpdate(id: number, updateNilaiDto: UpdateNilaiDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.nilaiControllerUpdate(id, updateNilaiDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NilaiApi - object-oriented interface
 * @export
 * @class NilaiApi
 * @extends {BaseAPI}
 */
export class NilaiApi extends BaseAPI {
    /**
     * 
     * @summary Create Nilai
     * @param {CreateNilaiDto} createNilaiDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NilaiApi
     */
    public nilaiControllerCreate(createNilaiDto: CreateNilaiDto, options?: RawAxiosRequestConfig) {
        return NilaiApiFp(this.configuration).nilaiControllerCreate(createNilaiDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Nilai
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NilaiApi
     */
    public nilaiControllerFindAll(options?: RawAxiosRequestConfig) {
        return NilaiApiFp(this.configuration).nilaiControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get One Nilai
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NilaiApi
     */
    public nilaiControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return NilaiApiFp(this.configuration).nilaiControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Nilai
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NilaiApi
     */
    public nilaiControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return NilaiApiFp(this.configuration).nilaiControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Nilai
     * @param {number} id 
     * @param {UpdateNilaiDto} updateNilaiDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NilaiApi
     */
    public nilaiControllerUpdate(id: number, updateNilaiDto: UpdateNilaiDto, options?: RawAxiosRequestConfig) {
        return NilaiApiFp(this.configuration).nilaiControllerUpdate(id, updateNilaiDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PelajaranApi - axios parameter creator
 * @export
 */
export const PelajaranApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Pelajaran
         * @param {CreatePelajaranDto} createPelajaranDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pelajaranControllerCreate: async (createPelajaranDto: CreatePelajaranDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPelajaranDto' is not null or undefined
            assertParamExists('pelajaranControllerCreate', 'createPelajaranDto', createPelajaranDto)
            const localVarPath = `/pelajaran/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPelajaranDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Pelajaran
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pelajaranControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pelajaran/get-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get One Pelajaran
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pelajaranControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pelajaranControllerFindOne', 'id', id)
            const localVarPath = `/pelajaran/get-by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Pelajaran
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pelajaranControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pelajaranControllerRemove', 'id', id)
            const localVarPath = `/pelajaran/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Pelajaran
         * @param {number} id 
         * @param {UpdatePelajaranDto} updatePelajaranDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pelajaranControllerUpdate: async (id: number, updatePelajaranDto: UpdatePelajaranDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pelajaranControllerUpdate', 'id', id)
            // verify required parameter 'updatePelajaranDto' is not null or undefined
            assertParamExists('pelajaranControllerUpdate', 'updatePelajaranDto', updatePelajaranDto)
            const localVarPath = `/pelajaran/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePelajaranDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PelajaranApi - functional programming interface
 * @export
 */
export const PelajaranApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PelajaranApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Pelajaran
         * @param {CreatePelajaranDto} createPelajaranDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pelajaranControllerCreate(createPelajaranDto: CreatePelajaranDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pelajaranControllerCreate(createPelajaranDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PelajaranApi.pelajaranControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Pelajaran
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pelajaranControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pelajaranControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PelajaranApi.pelajaranControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get One Pelajaran
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pelajaranControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pelajaranControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PelajaranApi.pelajaranControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Pelajaran
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pelajaranControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pelajaranControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PelajaranApi.pelajaranControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Pelajaran
         * @param {number} id 
         * @param {UpdatePelajaranDto} updatePelajaranDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pelajaranControllerUpdate(id: number, updatePelajaranDto: UpdatePelajaranDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pelajaranControllerUpdate(id, updatePelajaranDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PelajaranApi.pelajaranControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PelajaranApi - factory interface
 * @export
 */
export const PelajaranApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PelajaranApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Pelajaran
         * @param {CreatePelajaranDto} createPelajaranDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pelajaranControllerCreate(createPelajaranDto: CreatePelajaranDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pelajaranControllerCreate(createPelajaranDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Pelajaran
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pelajaranControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pelajaranControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get One Pelajaran
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pelajaranControllerFindOne(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pelajaranControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Pelajaran
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pelajaranControllerRemove(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pelajaranControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Pelajaran
         * @param {number} id 
         * @param {UpdatePelajaranDto} updatePelajaranDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pelajaranControllerUpdate(id: number, updatePelajaranDto: UpdatePelajaranDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pelajaranControllerUpdate(id, updatePelajaranDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PelajaranApi - object-oriented interface
 * @export
 * @class PelajaranApi
 * @extends {BaseAPI}
 */
export class PelajaranApi extends BaseAPI {
    /**
     * 
     * @summary Create Pelajaran
     * @param {CreatePelajaranDto} createPelajaranDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PelajaranApi
     */
    public pelajaranControllerCreate(createPelajaranDto: CreatePelajaranDto, options?: RawAxiosRequestConfig) {
        return PelajaranApiFp(this.configuration).pelajaranControllerCreate(createPelajaranDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Pelajaran
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PelajaranApi
     */
    public pelajaranControllerFindAll(options?: RawAxiosRequestConfig) {
        return PelajaranApiFp(this.configuration).pelajaranControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get One Pelajaran
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PelajaranApi
     */
    public pelajaranControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return PelajaranApiFp(this.configuration).pelajaranControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Pelajaran
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PelajaranApi
     */
    public pelajaranControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return PelajaranApiFp(this.configuration).pelajaranControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Pelajaran
     * @param {number} id 
     * @param {UpdatePelajaranDto} updatePelajaranDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PelajaranApi
     */
    public pelajaranControllerUpdate(id: number, updatePelajaranDto: UpdatePelajaranDto, options?: RawAxiosRequestConfig) {
        return PelajaranApiFp(this.configuration).pelajaranControllerUpdate(id, updatePelajaranDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PengumpulanApi - axios parameter creator
 * @export
 */
export const PengumpulanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Pengumpulan
         * @param {number} tugasId ID tugas yang terkait dengan pengumpulan
         * @param {number} pengumpulId ID pengguna yang mengumpulkan tugas
         * @param {string} [file] File tugas yang dikumpulkan
         * @param {string} [fileUrl] File URL tugas yang dikumpulkan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pengumpulanControllerCreate: async (tugasId: number, pengumpulId: number, file?: string, fileUrl?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tugasId' is not null or undefined
            assertParamExists('pengumpulanControllerCreate', 'tugasId', tugasId)
            // verify required parameter 'pengumpulId' is not null or undefined
            assertParamExists('pengumpulanControllerCreate', 'pengumpulId', pengumpulId)
            const localVarPath = `/pengumpulan/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (tugasId !== undefined) { 
                localVarFormParams.append('tugasId', tugasId as any);
            }
    
            if (pengumpulId !== undefined) { 
                localVarFormParams.append('pengumpulId', pengumpulId as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Pengumpulan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pengumpulanControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pengumpulan/get-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get One Pengumpulan
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pengumpulanControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pengumpulanControllerFindOne', 'id', id)
            const localVarPath = `/pengumpulan/get-by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Pengumpulan
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pengumpulanControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pengumpulanControllerRemove', 'id', id)
            const localVarPath = `/pengumpulan/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Pengumpulan
         * @param {number} id 
         * @param {number} tugasId ID tugas yang terkait dengan pengumpulan
         * @param {number} pengumpulId ID pengguna yang mengumpulkan tugas
         * @param {string} [file] File tugas yang dikumpulkan
         * @param {string} [fileUrl] File URL tugas yang dikumpulkan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pengumpulanControllerUpdate: async (id: number, tugasId: number, pengumpulId: number, file?: string, fileUrl?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pengumpulanControllerUpdate', 'id', id)
            // verify required parameter 'tugasId' is not null or undefined
            assertParamExists('pengumpulanControllerUpdate', 'tugasId', tugasId)
            // verify required parameter 'pengumpulId' is not null or undefined
            assertParamExists('pengumpulanControllerUpdate', 'pengumpulId', pengumpulId)
            const localVarPath = `/pengumpulan/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (tugasId !== undefined) { 
                localVarFormParams.append('tugasId', tugasId as any);
            }
    
            if (pengumpulId !== undefined) { 
                localVarFormParams.append('pengumpulId', pengumpulId as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (fileUrl !== undefined) { 
                localVarFormParams.append('file_url', fileUrl as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PengumpulanApi - functional programming interface
 * @export
 */
export const PengumpulanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PengumpulanApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Pengumpulan
         * @param {number} tugasId ID tugas yang terkait dengan pengumpulan
         * @param {number} pengumpulId ID pengguna yang mengumpulkan tugas
         * @param {string} [file] File tugas yang dikumpulkan
         * @param {string} [fileUrl] File URL tugas yang dikumpulkan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pengumpulanControllerCreate(tugasId: number, pengumpulId: number, file?: string, fileUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pengumpulanControllerCreate(tugasId, pengumpulId, file, fileUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PengumpulanApi.pengumpulanControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Pengumpulan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pengumpulanControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pengumpulanControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PengumpulanApi.pengumpulanControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get One Pengumpulan
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pengumpulanControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pengumpulanControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PengumpulanApi.pengumpulanControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Pengumpulan
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pengumpulanControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pengumpulanControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PengumpulanApi.pengumpulanControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Pengumpulan
         * @param {number} id 
         * @param {number} tugasId ID tugas yang terkait dengan pengumpulan
         * @param {number} pengumpulId ID pengguna yang mengumpulkan tugas
         * @param {string} [file] File tugas yang dikumpulkan
         * @param {string} [fileUrl] File URL tugas yang dikumpulkan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pengumpulanControllerUpdate(id: number, tugasId: number, pengumpulId: number, file?: string, fileUrl?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pengumpulanControllerUpdate(id, tugasId, pengumpulId, file, fileUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PengumpulanApi.pengumpulanControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PengumpulanApi - factory interface
 * @export
 */
export const PengumpulanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PengumpulanApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Pengumpulan
         * @param {number} tugasId ID tugas yang terkait dengan pengumpulan
         * @param {number} pengumpulId ID pengguna yang mengumpulkan tugas
         * @param {string} [file] File tugas yang dikumpulkan
         * @param {string} [fileUrl] File URL tugas yang dikumpulkan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pengumpulanControllerCreate(tugasId: number, pengumpulId: number, file?: string, fileUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pengumpulanControllerCreate(tugasId, pengumpulId, file, fileUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Pengumpulan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pengumpulanControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pengumpulanControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get One Pengumpulan
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pengumpulanControllerFindOne(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pengumpulanControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Pengumpulan
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pengumpulanControllerRemove(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pengumpulanControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Pengumpulan
         * @param {number} id 
         * @param {number} tugasId ID tugas yang terkait dengan pengumpulan
         * @param {number} pengumpulId ID pengguna yang mengumpulkan tugas
         * @param {string} [file] File tugas yang dikumpulkan
         * @param {string} [fileUrl] File URL tugas yang dikumpulkan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pengumpulanControllerUpdate(id: number, tugasId: number, pengumpulId: number, file?: string, fileUrl?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pengumpulanControllerUpdate(id, tugasId, pengumpulId, file, fileUrl, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PengumpulanApi - object-oriented interface
 * @export
 * @class PengumpulanApi
 * @extends {BaseAPI}
 */
export class PengumpulanApi extends BaseAPI {
    /**
     * 
     * @summary Create Pengumpulan
     * @param {number} tugasId ID tugas yang terkait dengan pengumpulan
     * @param {number} pengumpulId ID pengguna yang mengumpulkan tugas
     * @param {string} [file] File tugas yang dikumpulkan
     * @param {string} [fileUrl] File URL tugas yang dikumpulkan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PengumpulanApi
     */
    public pengumpulanControllerCreate(tugasId: number, pengumpulId: number, file?: string, fileUrl?: string, options?: RawAxiosRequestConfig) {
        return PengumpulanApiFp(this.configuration).pengumpulanControllerCreate(tugasId, pengumpulId, file, fileUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Pengumpulan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PengumpulanApi
     */
    public pengumpulanControllerFindAll(options?: RawAxiosRequestConfig) {
        return PengumpulanApiFp(this.configuration).pengumpulanControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get One Pengumpulan
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PengumpulanApi
     */
    public pengumpulanControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return PengumpulanApiFp(this.configuration).pengumpulanControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Pengumpulan
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PengumpulanApi
     */
    public pengumpulanControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return PengumpulanApiFp(this.configuration).pengumpulanControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Pengumpulan
     * @param {number} id 
     * @param {number} tugasId ID tugas yang terkait dengan pengumpulan
     * @param {number} pengumpulId ID pengguna yang mengumpulkan tugas
     * @param {string} [file] File tugas yang dikumpulkan
     * @param {string} [fileUrl] File URL tugas yang dikumpulkan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PengumpulanApi
     */
    public pengumpulanControllerUpdate(id: number, tugasId: number, pengumpulId: number, file?: string, fileUrl?: string, options?: RawAxiosRequestConfig) {
        return PengumpulanApiFp(this.configuration).pengumpulanControllerUpdate(id, tugasId, pengumpulId, file, fileUrl, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create User
         * @param {CreateUserDto} createUserDto Create a new User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreate: async (createUserDto: CreateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('userControllerCreate', 'createUserDto', createUserDto)
            const localVarPath = `/users/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerDelete', 'id', id)
            const localVarPath = `/users/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find One Guru
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFinOneGuru: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerFinOneGuru', 'id', id)
            const localVarPath = `/users/find-one-guru/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find One Siswa
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFinOneSiswa: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerFinOneSiswa', 'id', id)
            const localVarPath = `/users/find-one-siswa/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/get-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Guru
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetAllGuru: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/get-all-guru`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Siswa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetAllSiswa: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/get-all-siswa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update User
         * @param {number} id 
         * @param {UpdateUserDto} updateUserDto Update User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate: async (id: number, updateUserDto: UpdateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerUpdate', 'id', id)
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('userControllerUpdate', 'updateUserDto', updateUserDto)
            const localVarPath = `/users/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {CreateUserDto} createUserDto Create a new User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerCreate(createUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find One Guru
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerFinOneGuru(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerFinOneGuru(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerFinOneGuru']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find One Siswa
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerFinOneSiswa(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerFinOneSiswa(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerFinOneSiswa']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerGetAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Guru
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetAllGuru(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetAllGuru(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerGetAllGuru']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Siswa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetAllSiswa(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetAllSiswa(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerGetAllSiswa']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update User
         * @param {number} id 
         * @param {UpdateUserDto} updateUserDto Update User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdate(id: number, updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdate(id, updateUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {CreateUserDto} createUserDto Create a new User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerCreate(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find One Guru
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFinOneGuru(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerFinOneGuru(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find One Siswa
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFinOneSiswa(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerFinOneSiswa(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerGetAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Guru
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetAllGuru(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerGetAllGuru(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Siswa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetAllSiswa(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerGetAllSiswa(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update User
         * @param {number} id 
         * @param {UpdateUserDto} updateUserDto Update User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate(id: number, updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerUpdate(id, updateUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Create User
     * @param {CreateUserDto} createUserDto Create a new User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerCreate(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerDelete(id: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find One Guru
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerFinOneGuru(id: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerFinOneGuru(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find One Siswa
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerFinOneSiswa(id: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerFinOneSiswa(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerGetAll(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerGetAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Guru
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerGetAllGuru(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerGetAllGuru(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Siswa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerGetAllSiswa(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerGetAllSiswa(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update User
     * @param {number} id 
     * @param {UpdateUserDto} updateUserDto Update User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUpdate(id: number, updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerUpdate(id, updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserOnKelasApi - axios parameter creator
 * @export
 */
export const UserOnKelasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create
         * @param {CreateUserOnKelaDto} createUserOnKelaDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnKelasControllerCreate: async (createUserOnKelaDto: CreateUserOnKelaDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserOnKelaDto' is not null or undefined
            assertParamExists('userOnKelasControllerCreate', 'createUserOnKelaDto', createUserOnKelaDto)
            const localVarPath = `/user-on-kelas/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserOnKelaDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnKelasControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-on-kelas/get-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find By Kelas Id
         * @param {number} kelasId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnKelasControllerFindOneByKelasId: async (kelasId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kelasId' is not null or undefined
            assertParamExists('userOnKelasControllerFindOneByKelasId', 'kelasId', kelasId)
            const localVarPath = `/user-on-kelas/find-by-kelas-id/{kelasId}`
                .replace(`{${"kelasId"}}`, encodeURIComponent(String(kelasId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find By User Id
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnKelasControllerFindOneByUserId: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userOnKelasControllerFindOneByUserId', 'userId', userId)
            const localVarPath = `/user-on-kelas/find-by-user-id/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete
         * @param {DeleteUserOnKelasDto} deleteUserOnKelasDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnKelasControllerRemove: async (deleteUserOnKelasDto: DeleteUserOnKelasDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUserOnKelasDto' is not null or undefined
            assertParamExists('userOnKelasControllerRemove', 'deleteUserOnKelasDto', deleteUserOnKelasDto)
            const localVarPath = `/user-on-kelas/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUserOnKelasDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update
         * @param {UpdateUserOnKelasDto} updateUserOnKelasDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnKelasControllerUpdate: async (updateUserOnKelasDto: UpdateUserOnKelasDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserOnKelasDto' is not null or undefined
            assertParamExists('userOnKelasControllerUpdate', 'updateUserOnKelasDto', updateUserOnKelasDto)
            const localVarPath = `/user-on-kelas/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserOnKelasDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserOnKelasApi - functional programming interface
 * @export
 */
export const UserOnKelasApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserOnKelasApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create
         * @param {CreateUserOnKelaDto} createUserOnKelaDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOnKelasControllerCreate(createUserOnKelaDto: CreateUserOnKelaDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userOnKelasControllerCreate(createUserOnKelaDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserOnKelasApi.userOnKelasControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOnKelasControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userOnKelasControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserOnKelasApi.userOnKelasControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find By Kelas Id
         * @param {number} kelasId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOnKelasControllerFindOneByKelasId(kelasId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userOnKelasControllerFindOneByKelasId(kelasId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserOnKelasApi.userOnKelasControllerFindOneByKelasId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find By User Id
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOnKelasControllerFindOneByUserId(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userOnKelasControllerFindOneByUserId(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserOnKelasApi.userOnKelasControllerFindOneByUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete
         * @param {DeleteUserOnKelasDto} deleteUserOnKelasDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOnKelasControllerRemove(deleteUserOnKelasDto: DeleteUserOnKelasDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userOnKelasControllerRemove(deleteUserOnKelasDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserOnKelasApi.userOnKelasControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update
         * @param {UpdateUserOnKelasDto} updateUserOnKelasDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOnKelasControllerUpdate(updateUserOnKelasDto: UpdateUserOnKelasDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userOnKelasControllerUpdate(updateUserOnKelasDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserOnKelasApi.userOnKelasControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserOnKelasApi - factory interface
 * @export
 */
export const UserOnKelasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserOnKelasApiFp(configuration)
    return {
        /**
         * 
         * @summary Create
         * @param {CreateUserOnKelaDto} createUserOnKelaDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnKelasControllerCreate(createUserOnKelaDto: CreateUserOnKelaDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userOnKelasControllerCreate(createUserOnKelaDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnKelasControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userOnKelasControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find By Kelas Id
         * @param {number} kelasId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnKelasControllerFindOneByKelasId(kelasId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userOnKelasControllerFindOneByKelasId(kelasId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find By User Id
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnKelasControllerFindOneByUserId(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userOnKelasControllerFindOneByUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete
         * @param {DeleteUserOnKelasDto} deleteUserOnKelasDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnKelasControllerRemove(deleteUserOnKelasDto: DeleteUserOnKelasDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userOnKelasControllerRemove(deleteUserOnKelasDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update
         * @param {UpdateUserOnKelasDto} updateUserOnKelasDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOnKelasControllerUpdate(updateUserOnKelasDto: UpdateUserOnKelasDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userOnKelasControllerUpdate(updateUserOnKelasDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserOnKelasApi - object-oriented interface
 * @export
 * @class UserOnKelasApi
 * @extends {BaseAPI}
 */
export class UserOnKelasApi extends BaseAPI {
    /**
     * 
     * @summary Create
     * @param {CreateUserOnKelaDto} createUserOnKelaDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserOnKelasApi
     */
    public userOnKelasControllerCreate(createUserOnKelaDto: CreateUserOnKelaDto, options?: RawAxiosRequestConfig) {
        return UserOnKelasApiFp(this.configuration).userOnKelasControllerCreate(createUserOnKelaDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserOnKelasApi
     */
    public userOnKelasControllerFindAll(options?: RawAxiosRequestConfig) {
        return UserOnKelasApiFp(this.configuration).userOnKelasControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find By Kelas Id
     * @param {number} kelasId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserOnKelasApi
     */
    public userOnKelasControllerFindOneByKelasId(kelasId: number, options?: RawAxiosRequestConfig) {
        return UserOnKelasApiFp(this.configuration).userOnKelasControllerFindOneByKelasId(kelasId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find By User Id
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserOnKelasApi
     */
    public userOnKelasControllerFindOneByUserId(userId: number, options?: RawAxiosRequestConfig) {
        return UserOnKelasApiFp(this.configuration).userOnKelasControllerFindOneByUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete
     * @param {DeleteUserOnKelasDto} deleteUserOnKelasDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserOnKelasApi
     */
    public userOnKelasControllerRemove(deleteUserOnKelasDto: DeleteUserOnKelasDto, options?: RawAxiosRequestConfig) {
        return UserOnKelasApiFp(this.configuration).userOnKelasControllerRemove(deleteUserOnKelasDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update
     * @param {UpdateUserOnKelasDto} updateUserOnKelasDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserOnKelasApi
     */
    public userOnKelasControllerUpdate(updateUserOnKelasDto: UpdateUserOnKelasDto, options?: RawAxiosRequestConfig) {
        return UserOnKelasApiFp(this.configuration).userOnKelasControllerUpdate(updateUserOnKelasDto, options).then((request) => request(this.axios, this.basePath));
    }
}



